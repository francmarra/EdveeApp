@model Edveeeeeee.Models.ViewModels.EdVeeViewModel

<!-- CSS para estilos melhorados de adição de tópicos -->
<link rel="stylesheet" href="~/css/add-topic-styles.css" />

<h2>EdVee: @Model.UnidadeCurricular.Nome</h2>

@if (!string.IsNullOrWhiteSpace(Model.UnidadeCurricular.Descricao))
{
    <p><em>@Model.UnidadeCurricular.Descricao</em></p>
}

<!-- Connections Section Start -->
<div style="background: #f8f9fa; border-radius: 10px; padding: 15px; margin-top: 20px;">
    <h4>Conexões Entre Secções</h4>    <div class="connection-controls">
        <button id="toggleConnectionMode" class="btn-connection-mode inactive">Modo de Conexão: DESLIGADO</button>
        <button id="deleteIndividualConnection" class="btn-delete-individual" style="display: none;">Eliminar Conexão Individual</button>
        <button id="clearConnections" class="btn-clear-connections" style="display: none;">Limpar Conexões</button>
        <button id="saveConnections" class="btn-save-connections" style="display: none;">Salvar Conexões</button>
    </div>    <div class="connection-instructions" style="display:none; margin-top: 10px;">
        <p>Para criar uma ligação: <b>Clique</b> em um ponto de conexão e depois <b>clique</b> em outro ponto para ligar.</p>
        <p>Para eliminar uma ligação individual: <b>Clique</b> no botão "Eliminar Conexão Individual", depois <b>clique</b> em dois pontos de conexão para eliminar a ligação entre eles.</p>
    </div>
</div>

<!-- LeaderLine CDN -->
<script src="https://cdn.jsdelivr.net/npm/leader-line@1.0.7/leader-line.min.js"></script>
<script>    // Variáveis para controle de ligações
    let connectionMode = false;
    let deleteMode = false;
    let selectedElement = null;
    let lines = [];
    let currentConnections = [];
      // Função para posicionar corretamente os pontos de conexão
    function positionConnectionPoints() {
        document.querySelectorAll('.connectable').forEach(element => {
            // Pega o ID do elemento conectável
            const id = element.dataset.id;
            const section = element.dataset.section;
            
            // Encontra os pontos de conexão relacionados
            const connectionPoints = document.querySelectorAll(`.connection-point[data-for="${id}"]`);
            
            connectionPoints.forEach(point => {                // Ajusta a posição vertical para alinhar com o elemento
                const elementRect = element.getBoundingClientRect();
                const containerRect = point.parentElement.getBoundingClientRect();
                
                // Calcula a posição vertical relativa ao contêiner
                // Usamos altura exata dividida por 2 para garantir o centro exato
                const top = elementRect.top - containerRect.top + (elementRect.height / 2) - (point.offsetHeight / 2);
                
                // Define a posição do ponto
                point.style.top = `${top}px`;
            });
        });
    }
    
    // Função para recuperar as ligações existentes do servidor
    async function loadConnections() {
        try {
            const response = await fetch('/UC/GetConnections/@Model.UnidadeCurricular.Id');
            if (response.ok) {
                const connections = await response.json();
                currentConnections = connections; // Armazena as conexões recuperadas
                renderConnections(connections);
            }
        } catch (error) {
            console.error('Erro ao carregar conexões:', error);
        }
    }
    
    // Função para salvar as conexões criadas
    async function saveConnections() {
        try {
            // Garantir que os IDs sejam números (eles vêm como strings do DOM)
            const connectionsToSave = currentConnections.map(conn => ({
                origemTipo: conn.origemTipo,
                origemId: conn.origemId.toString(), // Garantir que é string (o controller fará a conversão)
                destinoTipo: conn.destinoTipo,
                destinoId: conn.destinoId.toString() // Garantir que é string (o controller fará a conversão)
            }));
            
            console.log('Enviando conexões:', connectionsToSave);
            
            const response = await fetch('/UC/SaveConnections', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ucId: @Model.UnidadeCurricular.Id,
                    connections: connectionsToSave
                })
            });
              const result = await response.json();
            
            if (response.ok) {
                showCustomPopup('Conexões salvas com sucesso!', 'success');
            } else {
                showCustomPopup('Erro ao salvar conexões: ' + (result.message || 'Erro desconhecido'), 'error');
                console.error('Resposta de erro:', result);
            }
        } catch (error) {
            console.error('Erro ao salvar conexões:', error);
            showCustomPopup('Erro ao salvar conexões. Veja o console para detalhes.', 'error');        }
    }

    // Função para mostrar pop-up personalizado
    function showCustomPopup(message, type = 'info') {
        // Remove pop-up existente se houver
        const existingPopup = document.querySelector('.custom-popup');
        if (existingPopup) {
            existingPopup.remove();
        }

        // Cria o overlay
        const overlay = document.createElement('div');
        overlay.className = 'popup-overlay';
        
        // Cria o pop-up
        const popup = document.createElement('div');
        popup.className = `custom-popup ${type}`;
        
        // Define o ícone baseado no tipo
        let icon = '';
        if (type === 'success') {
            icon = '✓';
        } else if (type === 'error') {
            icon = '✕';
        } else {
            icon = 'ℹ';
        }
        
        popup.innerHTML = `
            <div class="popup-content">
                <div class="popup-icon">${icon}</div>
                <div class="popup-message">${message}</div>
                <button class="popup-close-btn" onclick="closeCustomPopup()">OK</button>
            </div>
        `;
          // Adiciona ao documento
        overlay.appendChild(popup);
        document.body.appendChild(overlay);
          // Adiciona evento para fechar clicando fora do pop-up
        overlay.addEventListener('click', (e) => {
            if (e.target === overlay) {
                closeCustomPopup();
            }
        });

        // Adiciona evento para fechar com a tecla Escape
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                closeCustomPopup();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
        
        // Mostra com animação
        setTimeout(() => {
            overlay.classList.add('show');
        }, 10);
        
        // Auto-close após 4 segundos para mensagens de sucesso
        if (type === 'success') {
            setTimeout(() => {
                closeCustomPopup();
            }, 4000);
        }
    }

    // Função para fechar o pop-up personalizado
    function closeCustomPopup() {
        const popup = document.querySelector('.popup-overlay');
        if (popup) {
            popup.classList.remove('show');
            setTimeout(() => {
                popup.remove();
            }, 300);
        }
    }
    
    // Função para desenhar as ligações na tela
    function renderConnections(connections) {
        // Limpa as linhas existentes
        clearLines();
        
        // Para cada conexão, cria uma linha
        connections.forEach(conn => {
            const origemElement = document.querySelector(`[data-id="${conn.origemTipo}-${conn.origemId}"]`);
            const destinoElement = document.querySelector(`[data-id="${conn.destinoTipo}-${conn.destinoId}"]`);
            
            if (origemElement && destinoElement) {
                // Encontra os pontos de conexão externos
                const origemPoint = document.querySelector(`.connection-point[data-for="${conn.origemTipo}-${conn.origemId}"]`);
                const destinoPoint = document.querySelector(`.connection-point[data-for="${conn.destinoTipo}-${conn.destinoId}"]`);
                
                if (origemPoint && destinoPoint) {
                    // Define a cor da linha baseada nos tipos de origem e destino
                    let lineColor = getLineColor(origemElement.dataset.section, destinoElement.dataset.section);                    // Cria uma linha simples usando os pontos de conexão externos
                    const line = new LeaderLine(
                        origemPoint,
                        destinoPoint,
                        {
                            path: 'straight',
                            endPlug: 'behind',
                            startPlug: 'behind',
                            size: 2.5,
                            color: lineColor,
                            startSocket: 'right',
                            endSocket: 'left',
                            startSocketGravity: 0,  // Sem curva na saída
                            endSocketGravity: 0,    // Sem curva na chegada
                            startPlugSize: 1, // Tamanho reduzido para melhor alinhamento
                            endPlugSize: 1,    // Tamanho reduzido para melhor alinhamento
                            dash: {animation: true}
                        }
                    );
                    lines.push(line);
                }
            }
        });
    }
    
    // Função para determinar a cor da linha baseada nos tipos de origem e destino
    function getLineColor(origemSection, destinoSection) {
        // Cor padrão
        let color = '#0066cc';
        
        // Cores por tipo de seção
        if ((origemSection === 'Conteudo' && destinoSection === 'Atividade') || 
            (origemSection === 'Atividade' && destinoSection === 'Conteudo')) {
            color = '#4caf50'; // Verde para conexões Conteudo-Atividade
        } else if ((origemSection === 'Competencia' && destinoSection === 'Avaliacao') || 
                  (origemSection === 'Avaliacao' && destinoSection === 'Competencia')) {
            color = '#2196f3'; // Azul para conexões Competencia-Avaliacao
        } else if ((origemSection === 'Competencia' && destinoSection === 'Atividade') || 
                  (origemSection === 'Atividade' && destinoSection === 'Competencia')) {
            color = '#e91e63'; // Rosa para conexões Competencia-Atividade
        } else if ((origemSection === 'Conteudo' && destinoSection === 'Avaliacao') || 
                  (origemSection === 'Avaliacao' && destinoSection === 'Conteudo')) {
            color = '#ffc107'; // Amarelo para conexões Conteudo-Avaliacao
        }
        
        return color;
    }    // Função para limpar todas as linhas
    function clearLines() {
        lines.forEach(line => line.remove());
        lines = [];
        // Só limpa as conexões se foi um clear manual (não automático do modo)
    }
    
    // Função para limpar tudo (linhas e conexões)
    function clearAllConnections() {
        lines.forEach(line => line.remove());
        lines = [];
        currentConnections = [];
    }    // Função para ativar/desativar o modo de conexão
    function toggleConnectionMode() {
        connectionMode = !connectionMode;
        const button = document.getElementById('toggleConnectionMode');
        const instructions = document.querySelector('.connection-instructions');
        const deleteBtn = document.getElementById('deleteIndividualConnection');
        const clearBtn = document.getElementById('clearConnections');
        const saveBtn = document.getElementById('saveConnections');
        
        if (connectionMode) {
            button.textContent = 'Modo de Conexão: LIGADO';
            button.classList.add('active');
            button.classList.remove('inactive');
            instructions.style.display = 'block';
            deleteBtn.style.display = 'inline-block';
            clearBtn.style.display = 'inline-block';
            saveBtn.style.display = 'inline-block';
            
            // Desativa modo de eliminação se estiver ativo
            if (deleteMode) {
                deleteMode = false;
                const deleteModeBtn = document.getElementById('deleteIndividualConnection');
                deleteModeBtn.textContent = 'Eliminar Conexão Individual';
                deleteModeBtn.style.backgroundColor = '#f44336';
                
                // Remove classes de modo de eliminação
                document.querySelectorAll('.connection-point').forEach(el => {
                    el.classList.remove('delete-mode');
                    el.classList.remove('selected-element');
                });
                
                // Restaura aparência normal das linhas
                restoreNormalConnections();
            }
            
            // Adiciona classe de destaque aos pontos de conexão
            document.querySelectorAll('.connection-point').forEach(el => {
                el.classList.add('connection-mode');
            });
            
            // Atualiza os tooltips
            setConnectionPointTooltips();
        } else {
            button.textContent = 'Modo de Conexão: DESLIGADO';
            button.classList.remove('active');
            button.classList.add('inactive');
            instructions.style.display = 'none';
            deleteBtn.style.display = 'none';
            clearBtn.style.display = 'none';
            saveBtn.style.display = 'none';
            selectedElement = null;
            deleteMode = false;
            
            // Remove classe de destaque
            document.querySelectorAll('.connection-point').forEach(el => {
                el.classList.remove('connection-mode');
                el.classList.remove('selected-element');
                el.classList.remove('can-connect');
                el.classList.remove('delete-mode');
            });
            
            // Atualiza os tooltips
            setConnectionPointTooltips();
            
            // Renderiza novamente as conexões existentes (sem perder dados)
            renderStoredConnections();
        }
    }
      // Função para ativar/desativar o modo de eliminação individual
    function toggleDeleteMode() {
        deleteMode = !deleteMode;
        const button = document.getElementById('deleteIndividualConnection');
        
        if (deleteMode) {
            button.textContent = 'Cancelar Eliminação';
            button.style.backgroundColor = '#ff9800';
            connectionMode = false; // Desativa modo de conexão
            selectedElement = null;
            
            // Remove classes dos pontos de conexão
            document.querySelectorAll('.connection-point').forEach(el => {
                el.classList.remove('connection-mode');
                el.classList.remove('selected-element');
                el.classList.remove('can-connect');
                el.classList.add('delete-mode'); // Adiciona classe para modo de eliminação
            });
            
            // Muda a aparência das linhas para indicar que podem ser eliminadas
            highlightDeletableConnections();
            
            setConnectionPointTooltips();
        } else {
            button.textContent = 'Eliminar Conexão Individual';
            button.style.backgroundColor = '#f44336';
            selectedElement = null;
            
            // Remove classes de modo de eliminação
            document.querySelectorAll('.connection-point').forEach(el => {
                el.classList.remove('delete-mode');
                el.classList.remove('selected-element');
            });
            
            // Restaura aparência normal das linhas
            restoreNormalConnections();
        }
    }    // Função para eliminar uma conexão específica entre dois pontos
    function deleteConnectionBetweenPoints(ponto1, ponto2) {
        console.log('Procurando conexão entre:', ponto1.dataset.for, 'e', ponto2.dataset.for);
        
        const [tipo1, id1] = ponto1.dataset.for.split('-');
        const [tipo2, id2] = ponto2.dataset.for.split('-');
        
        // Procura a conexão nos dois sentidos possíveis
        let connectionIndex = -1;
        
        connectionIndex = currentConnections.findIndex(conn => 
            (conn.origemTipo === tipo1 && conn.origemId == id1 && 
             conn.destinoTipo === tipo2 && conn.destinoId == id2) ||
            (conn.origemTipo === tipo2 && conn.origemId == id2 && 
             conn.destinoTipo === tipo1 && conn.destinoId == id1)
        );
        
        if (connectionIndex !== -1) {
            console.log(`Conexão encontrada no índice ${connectionIndex}:`, currentConnections[connectionIndex]);
            
            // Remove a linha visual
            const lineToRemove = lines[connectionIndex];
            lineToRemove.remove();
            lines.splice(connectionIndex, 1);
            
            // Remove da lista de conexões
            currentConnections.splice(connectionIndex, 1);
            
            console.log(`Conexão eliminada. Restam ${lines.length} linhas e ${currentConnections.length} conexões`);
            
            // Restaura aparência das linhas restantes
            if (deleteMode) {
                highlightDeletableConnections();
            }
            
            showCustomPopup('Conexão eliminada com sucesso!', 'success');
            return true;
        } else {
            console.log('Nenhuma conexão encontrada entre estes pontos');
            showCustomPopup('Não existe conexão entre estes pontos!', 'error');
            return false;
        }
    }
    
    // Função para destacar conexões que podem ser eliminadas
    function highlightDeletableConnections() {
        lines.forEach(line => {
            line.setOptions({
                size: 4,
                color: '#ff5722',
                dash: {animation: true, len: 8, gap: 4}
            });
        });
    }
    
    // Função para restaurar aparência normal das conexões
    function restoreNormalConnections() {
        lines.forEach((line, index) => {
            const conn = currentConnections[index];
            if (conn) {
                const origemElement = document.querySelector(`[data-id="${conn.origemTipo}-${conn.origemId}"]`);
                const destinoElement = document.querySelector(`[data-id="${conn.destinoTipo}-${conn.destinoId}"]`);
                if (origemElement && destinoElement) {
                    const originalColor = getLineColor(origemElement.dataset.section, destinoElement.dataset.section);
                    line.setOptions({
                        size: 2.5,
                        color: originalColor,
                        dash: {animation: true}
                    });
                }
            }
        });
    }    // Função para renderizar as conexões armazenadas sem limpar a lista atual
    function renderStoredConnections() {
        // Limpa apenas as linhas visuais, mantendo as conexões armazenadas
        lines.forEach(line => line.remove());
        lines = [];
        
        // Para cada conexão armazenada, cria uma linha visual
        currentConnections.forEach(conn => {
            const origemElement = document.querySelector(`[data-id="${conn.origemTipo}-${conn.origemId}"]`);
            const destinoElement = document.querySelector(`[data-id="${conn.destinoTipo}-${conn.destinoId}"]`);
            
            if (origemElement && destinoElement) {
                // Encontra os pontos de conexão externos
                const origemPoint = document.querySelector(`.connection-point[data-for="${conn.origemTipo}-${conn.origemId}"]`);
                const destinoPoint = document.querySelector(`.connection-point[data-for="${conn.destinoTipo}-${conn.destinoId}"]`);
                
                if (origemPoint && destinoPoint) {
                    let lineColor = getLineColor(origemElement.dataset.section, destinoElement.dataset.section);
                    
                    // Cria a linha visual
                    const line = new LeaderLine(
                        origemPoint,
                        destinoPoint,
                        {
                            path: 'straight',
                            endPlug: 'behind',
                            startPlug: 'behind',
                            size: 2.5, // Linha um pouco mais espessa para melhor visualização
                            color: lineColor,
                            startSocket: 'right',
                            endSocket: 'left',
                            startSocketGravity: 0,
                            endSocketGravity: 0,
                            startPlugSize: 1, // Tamanho reduzido para melhor alinhamento
                            endPlugSize: 1,    // Tamanho reduzido para melhor alinhamento
                            dash: {animation: true}
                        }
                    );
                    lines.push(line);
                }
            }
        });
        
        // Se estamos em modo de eliminação, aplica os estilos visuais
        if (deleteMode) {
            highlightDeletableConnections();
        }
    }
    
    // Função para limpar o estado de "pode conectar" de todos os pontos
    function clearCanConnectStatus() {
        document.querySelectorAll('.connection-point').forEach(el => {
            el.classList.remove('can-connect');
        });
    }
    
    // Função para mostrar pontos que podem ser conectados
    function showConnectablePotentials(selectedPoint) {
        if (!selectedPoint) return;
        
        // Determinar os tipos compatíveis com base no selecionado
        const [tipo, id] = selectedPoint.dataset.for.split('-');
        const section = selectedPoint.dataset.section;
        
        // Diferentes regras de conexão baseadas no tipo
        let compatibleSections = [];
        
        if (section === "Competencia") {
            compatibleSections = ["Conteudo", "Avaliacao", "Atividade"];
        } else if (section === "Conteudo") {
            compatibleSections = ["Avaliacao", "Atividade"];
        } else if (section === "Avaliacao") {
            compatibleSections = ["Atividade"];
        }
        
        // Adicionar a classe aos pontos compatíveis
        document.querySelectorAll('.connection-point').forEach(el => {
            if (el === selectedPoint) return; // Pula o próprio ponto
            
            const pointSection = el.dataset.section;
            if (compatibleSections.includes(pointSection)) {
                el.classList.add('can-connect');
            }
        });
    }    // Manipulador de clique para selecionar elementos
    function handleConnectionPointClick(e) {
        const element = e.currentTarget;
        const connectableId = element.dataset.for;
        
        // Se estamos em modo de eliminação
        if (deleteMode) {
            if (!selectedElement) {
                // Primeira seleção para eliminação
                selectedElement = element;
                element.classList.add('selected-element');
                setConnectionPointTooltips();
            } else if (selectedElement === element) {
                // Clicou no mesmo elemento - deseleciona
                selectedElement.classList.remove('selected-element');
                selectedElement = null;
                setConnectionPointTooltips();
            } else {
                // Segunda seleção - tenta eliminar conexão
                const sucesso = deleteConnectionBetweenPoints(selectedElement, element);
                
                // Limpa a seleção independentemente do resultado
                selectedElement.classList.remove('selected-element');
                selectedElement = null;
                setConnectionPointTooltips();
            }
            return;
        }
        
        // Lógica original para modo de conexão
        if (!connectionMode) return;
        
        if (!selectedElement) {
            // Primeira seleção
            selectedElement = element;
            element.classList.add('selected-element');
            showConnectablePotentials(element); // Mostrar pontos que podem ser conectados
            setConnectionPointTooltips(); // Atualizar tooltips
        } else if (selectedElement === element) {
            // Clicou no mesmo elemento - deseleciona
            selectedElement.classList.remove('selected-element');
            selectedElement = null;
            clearCanConnectStatus(); // Limpar estado de "pode conectar"
            setConnectionPointTooltips(); // Atualizar tooltips
        } else {
            // Segunda seleção - cria a conexão
            const origem = selectedElement;
            const destino = element;
            
            // Busca os IDs dos elementos conectáveis
            const origemConnectableId = origem.dataset.for;
            const destinoConnectableId = destino.dataset.for;
            
            // Extrai tipo e ID
            const [origemTipo, origemId] = origemConnectableId.split('-');
            const [destinoTipo, destinoId] = destinoConnectableId.split('-');
            
            // Encontra os elementos conectáveis para usar seus datasets
            const origemElement = document.querySelector(`[data-id="${origemConnectableId}"]`);
            const destinoElement = document.querySelector(`[data-id="${destinoConnectableId}"]`);
            
            // Verifica se a conexão já existe
            const existingConnection = currentConnections.find(
                conn => conn.origemId == origemId && 
                       conn.origemTipo === origemTipo &&
                       conn.destinoId == destinoId &&
                       conn.destinoTipo === destinoTipo
            );
            
            if (!existingConnection && origemElement && destinoElement) {
                // Define a cor da linha baseada nas seções
                let lineColor = getLineColor(origemElement.dataset.section, destinoElement.dataset.section);
                
                // Cria a linha visual simples
                const line = new LeaderLine(
                    origem,
                    destino,
                    {
                        path: 'straight',
                        endPlug: 'behind',
                        startPlug: 'behind',
                        size: 2.5,
                        color: lineColor,
                        startSocket: 'right',
                        endSocket: 'left',
                        startSocketGravity: 0,
                        endSocketGravity: 0,
                        startPlugSize: 1, // Tamanho reduzido para melhor alinhamento
                        endPlugSize: 1,   // Tamanho reduzido para melhor alinhamento
                        dash: {animation: true}
                    }
                );
                lines.push(line);
                
                // Adiciona à lista de conexões
                currentConnections.push({
                    origemTipo: origemTipo,
                    origemId: origemId,
                    destinoTipo: destinoTipo,
                    destinoId: destinoId
                });
                
                // Exibe feedback visual
                showConnectionFeedback(origem, destino);
            }
              // Limpa a seleção
            selectedElement.classList.remove('selected-element');
            selectedElement = null;
            clearCanConnectStatus(); // Limpar estado de "pode conectar"
            setConnectionPointTooltips(); // Atualizar tooltips
        }
    }
    
    // Função para exibir feedback visual quando uma conexão é criada
    function showConnectionFeedback(origem, destino) {
        // Adiciona uma classe temporária para indicar sucesso
        [origem, destino].forEach(el => {
            el.classList.add('connection-success');
            
            // Remove a classe após a animação
            setTimeout(() => {
                el.classList.remove('connection-success');
            }, 1000);
        });
    }    // Função para definir os tooltips para os pontos de conexão
    function setConnectionPointTooltips() {
        document.querySelectorAll('.connection-point').forEach(point => {
            const [tipo, id] = point.dataset.for.split('-');
            const section = point.dataset.section;
            
            let tooltipText = "";
            if (deleteMode) {
                if (selectedElement === point) {
                    tooltipText = "Clique para cancelar seleção";
                } else if (selectedElement) {
                    tooltipText = "Clique para eliminar conexão";
                } else {
                    tooltipText = "Clique para selecionar ponto de eliminação";
                }
            } else if (connectionMode) {
                if (selectedElement === point) {
                    tooltipText = "Clique para cancelar";
                } else if (selectedElement) {
                    tooltipText = "Clique para conectar";
                } else {
                    tooltipText = "Clique para selecionar";
                }
            } else {
                tooltipText = `${section} (Ponto de conexão)`;
            }
            
            point.setAttribute('data-tooltip', tooltipText);
        });
    }
      // Inicialização
    window.addEventListener('DOMContentLoaded', () => {
        // Posiciona os pontos de conexão
        positionConnectionPoints();
        
        // Definir tooltips iniciais
        setConnectionPointTooltips();
        
        // Carrega conexões existentes
        loadConnections();
          // Configura handlers dos botões
        document.getElementById('toggleConnectionMode').addEventListener('click', toggleConnectionMode);
        document.getElementById('deleteIndividualConnection').addEventListener('click', toggleDeleteMode);        document.getElementById('clearConnections').addEventListener('click', () => {
            clearAllConnections();
            if (!connectionMode) {
                renderStoredConnections();
            }
        });
        document.getElementById('saveConnections').addEventListener('click', saveConnections);
        
        // Adiciona handler de clique aos pontos de conexão
        document.querySelectorAll('.connection-point').forEach(el => {
            el.addEventListener('click', handleConnectionPointClick);
        });
        
        // Ajusta as linhas quando a janela é redimensionada
        window.addEventListener('resize', () => {
            positionConnectionPoints();
            lines.forEach(line => line.position());
        });
        
        // Observer para mudanças no layout
        const observer = new MutationObserver(() => {
            positionConnectionPoints();
            lines.forEach(line => line.position());
        });
        
        // Observa mudanças no layout
        observer.observe(document.body, { 
            childList: true, 
            subtree: true,
            attributes: true
        });        // Add topic form toggle functionality
        document.querySelectorAll('.add-topic-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const targetForm = document.getElementById(targetId);
                
                // Efeito visual ao clicar no botão
                this.style.transform = 'scale(0.98)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 150);
                
                // Close any open forms first
                document.querySelectorAll('.add-topic-form.active').forEach(openForm => {
                    if (openForm.id !== targetId) {
                        openForm.classList.remove('active');
                        setTimeout(() => {
                            openForm.querySelector('textarea').value = ''; // Clear the input
                        }, 300);
                    }
                });
                
                // Toggle the target form
                targetForm.classList.toggle('active');
                
                // Focus on the textarea if form is now active
                if (targetForm.classList.contains('active')) {
                    setTimeout(() => {
                        targetForm.querySelector('textarea').focus();
                    }, 100);
                }
            });
        });
        
        // Cancel button functionality
        document.querySelectorAll('.btn-cancel').forEach(btn => {
            btn.addEventListener('click', function() {
                const form = this.closest('.add-topic-form');
                
                // Efeito visual ao clicar no botão
                this.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 150);
                
                form.classList.remove('active');
                
                // Clear the input with delay
                setTimeout(() => {
                    form.querySelector('textarea').value = '';
                }, 300);
            });
        });
        
        // Confirm button visual feedback
        document.querySelectorAll('.btn-confirm').forEach(btn => {
            btn.addEventListener('mousedown', function() {
                this.style.transform = 'scale(0.95)';
            });
            
            btn.addEventListener('mouseup', function() {
                this.style.transform = 'scale(1)';
            });
            
            btn.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1)';
            });
        });
    });
</script>

<div class="edvee-matrix">
    <div class="edvee-row">
        <!-- Competências -->
        <div class="edvee-box competencias">
            <h3>Competências</h3>
            <div class="edvee-table">
                @foreach (var c in Model.Competencias)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <div class="connectable" data-id="Competencia-@c.Id" data-section="Competencia">
                                @c.Texto
                            </div>
                            <!-- Pontos de conexão à direita -->
                            <div class="connection-point-container connection-points-right">
                                <div class="connection-point" data-section="Competencia" data-for="Competencia-@c.Id"></div>
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditCompetencia/@c.Id">Editar</a>
                                    <form asp-action="DeleteCompetencia" method="post">
                                        <input type="hidden" name="id" value="@c.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="add-topic-container">
                <button class="add-topic-btn" data-target="add-competencia-form">+ Nova Competência</button>
                <div id="add-competencia-form" class="add-topic-form">
                    <form asp-action="AddCompetencia" method="post">
                        <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                        <textarea name="texto" placeholder="Descreva a nova competência..." rows="3"></textarea>
                        <div class="add-topic-actions">
                            <button type="button" class="btn-cancel">Cancelar</button>
                            <button type="submit" class="btn-confirm">Adicionar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Avaliação -->
        <div class="edvee-box avaliacoes">
            <h3>Avaliação</h3>
            <div class="edvee-table">
                @foreach (var a in Model.Avaliacoes)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <!-- Pontos de conexão à esquerda -->
                            <div class="connection-point-container connection-points-left">
                                <div class="connection-point" data-section="Avaliacao" data-for="Avaliacao-@a.Id"></div>
                            </div>
                            <div class="connectable" data-id="Avaliacao-@a.Id" data-section="Avaliacao">
                                @a.Texto
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditAvaliacao/@a.Id">Editar</a>
                                    <form asp-action="DeleteAvaliacao" method="post">
                                        <input type="hidden" name="id" value="@a.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="add-topic-container">
                <button class="add-topic-btn" data-target="add-avaliacao-form">+ Nova Avaliação</button>
                <div id="add-avaliacao-form" class="add-topic-form">
                    <form asp-action="AddAvaliacao" method="post">
                        <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                        <textarea name="texto" placeholder="Descreva a nova avaliação..." rows="3"></textarea>
                        <div class="add-topic-actions">
                            <button type="button" class="btn-cancel">Cancelar</button>
                            <button type="submit" class="btn-confirm">Adicionar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <div class="edvee-row">
        <!-- Conteúdos -->
        <div class="edvee-box conteudos">
            <h3>Conteúdos</h3>
            <div class="edvee-table">
                @foreach (var c in Model.Conteudos)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <div class="connectable" data-id="Conteudo-@c.Id" data-section="Conteudo">
                                @c.Texto
                            </div>
                            <!-- Pontos de conexão à direita -->
                            <div class="connection-point-container connection-points-right">
                                <div class="connection-point" data-section="Conteudo" data-for="Conteudo-@c.Id"></div>
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditConteudo/@c.Id">Editar</a>
                                    <form asp-action="DeleteConteudo" method="post">
                                        <input type="hidden" name="id" value="@c.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="add-topic-container">
                <button class="add-topic-btn" data-target="add-conteudo-form">+ Novo Conteúdo</button>
                <div id="add-conteudo-form" class="add-topic-form">
                    <form asp-action="AddConteudo" method="post">
                        <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                        <textarea name="texto" placeholder="Descreva o novo conteúdo..." rows="3"></textarea>
                        <div class="add-topic-actions">
                            <button type="button" class="btn-cancel">Cancelar</button>
                            <button type="submit" class="btn-confirm">Adicionar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Atividades -->
        <div class="edvee-box atividades">
            <h3>Atividades</h3>
            <div class="edvee-table">
                @foreach (var a in Model.Atividades)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <!-- Pontos de conexão à esquerda -->
                            <div class="connection-point-container connection-points-left">
                                <div class="connection-point" data-section="Atividade" data-for="Atividade-@a.Id"></div>
                            </div>
                            <div class="connectable" data-id="Atividade-@a.Id" data-section="Atividade">
                                @a.Texto
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditAtividade/@a.Id">Editar</a>
                                    <form asp-action="DeleteAtividade" method="post">
                                        <input type="hidden" name="id" value="@a.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="add-topic-container">
                <button class="add-topic-btn" data-target="add-atividade-form">+ Nova Atividade</button>
                <div id="add-atividade-form" class="add-topic-form">
                    <form asp-action="AddAtividade" method="post">
                        <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                        <textarea name="texto" placeholder="Descreva a nova atividade..." rows="3"></textarea>
                        <div class="add-topic-actions">
                            <button type="button" class="btn-cancel">Cancelar</button>
                            <button type="submit" class="btn-confirm">Adicionar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        font-family: "Segoe UI", Arial, sans-serif;
        background: #f7f7f7;
    }
    
    .btn-edvee {
        background-color: #a60000;
        color: white;
        padding: 8px 14px;
        border-radius: 4px;
        text-decoration: none;
        margin-right: 10px;
    }
    
    .btn-matrix {
        background-color: #0055aa;
        color: white;
        padding: 8px 14px;
        border-radius: 4px;
        text-decoration: none;
    }
      .btn-connection-mode, .btn-clear-connections, .btn-save-connections, .btn-delete-individual {
        padding: 8px 14px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        margin-right: 10px;
        font-weight: bold;
        color: white;
    }
    
    .btn-connection-mode {
        background-color: #22aa22;
    }
    
    .btn-connection-mode.active {
        background-color: #22aa22;
    }
    
    /* Versão verde quando ativo, cinza quando desligado */
    #toggleConnectionMode {
        background-color: #22aa22;
    }
    
    #toggleConnectionMode.inactive {
        background-color: #5a5a5a;
    }
    
    .btn-delete-individual {
        background-color: #f44336;
        transition: background-color 0.3s;
    }
    
    .btn-delete-individual:hover {
        background-color: #d32f2f;
    }
    
    .btn-clear-connections {
        background-color: #d32f2f;
    }
    
    .btn-save-connections {
        background-color: #1976d2;
    }
    
    .connection-controls {
        display: flex;
        margin: 15px 0;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .connection-instructions {
        background-color: #ffd;
        padding: 10px;
        border-radius: 4px;
        border-left: 4px solid #fb1;
        margin-bottom: 15px;
    }
    
    .connectable {
        position: relative;
        padding: 8px 15px; /* Reduced padding since we're removing the left circles */
        cursor: pointer;
        margin: 5px 0;
        white-space: normal; /* Allow text to wrap */
        overflow: visible; /* Show all text */
        line-height: 1.4;
        border-radius: 4px;
        transition: all 0.2s ease;
    }
    
    /* Remove the circle connection point on left */
    .connectable:before {
        display: none; /* Hide the circles instead of removing the rule completely */
    }
    
    /* Connection points for anchor lines */
    .connectable .connection-point-left,
    .connectable .connection-point-right {
        display: none; /* Hide the internal connection points */
    }
    
    /* Section-specific colors for connection points - no longer needed since circles are hidden */
    .connectable[data-section="Competencia"]:before,
    .connectable[data-section="Avaliacao"]:before,
    .connectable[data-section="Conteudo"]:before,
    .connectable[data-section="Atividade"]:before {
        display: none;
    }    .edvee-matrix {
        display: flex;
        flex-direction: column;
        gap: 25px; /* Further reduced from 40px for much more compact layout */
        margin-top: 15px; /* Further reduced from 20px */
        background: transparent;
        position: relative; 
        overflow: visible;
        width: 100%;
        padding-bottom: 40px; /* Further reduced from 60px */
    }    .edvee-row {
        display: flex;
        justify-content: space-between;
        position: relative;
        gap: 40px; /* Slightly increased gap to accommodate narrower boxes */
    }/* Improved connector positioning */
    .connectable {
        position: relative;
        padding: 4px 8px; /* Much more compact padding */
        cursor: pointer;
        margin: 2px 0; /* Minimal margin */
        white-space: normal; /* Allow text to wrap */
        overflow: visible; /* Show all text */
        line-height: 1.2; /* Very tight line height */
        border-radius: 2px; /* Minimal radius */
        transition: all 0.2s ease;
    }
    
    /* Remove the circle connection point on left */
    .connectable:before {
        display: none; /* Hide the circles instead of removing the rule completely */
    }
    
    /* Connection points for anchor lines */
    .connectable .connection-point-left,
    .connectable .connection-point-right {
        display: none; /* Hide the internal connection points */
    }
    
    /* Section-specific colors for connection points - no longer needed since circles are hidden */
    .connectable[data-section="Competencia"]:before,
    .connectable[data-section="Avaliacao"]:before,
    .connectable[data-section="Conteudo"]:before,
    .connectable[data-section="Atividade"]:before {
        display: none;
    }    .edvee-box {
        flex: 1;
        background-color: #fff;
        padding: 0;
        border-radius: 4px; /* Further reduced radius */
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.06); /* Much lighter shadow */
        overflow: visible;
        min-width: 30%; /* Further reduced to make tables even narrower */
        max-width: 40%; /* Further reduced to make tables even narrower */
        margin-bottom: 10px; /* Further reduced margin */
        z-index: 1;
    }
    
    .edvee-box:hover {
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08); /* Lighter hover shadow */
    }
      .edvee-box h3 {
        margin: 0;
        padding: 8px 12px; /* Further reduced padding */
        font-size: 14px; /* Smaller font size */
        color: #fff;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
    }
    
    .edvee-box.competencias h3 {
        background-color: #e91e63;
    }
    
    .edvee-box.avaliacoes h3 {
        background-color: #2196f3;
    }
    
    .edvee-box.conteudos h3 {
        background-color: #ffc107;
    }
    
    .edvee-box.atividades h3 {
        background-color: #4caf50;
    }    .edvee-table {
        display: flex;
        flex-direction: column;
        gap: 5px; /* Further reduced from 8px */
        padding: 6px; /* Further reduced padding for narrower tables */
    }
      .edvee-table .edvee-row {
        display: flex;
        align-items: center;
        padding: 4px 0; /* Further reduced from 6px */
        border-bottom: 1px solid #f5f5f5; /* Even lighter border */
    }
    
    .edvee-table .edvee-row:last-child {
        border-bottom: none; /* Remove border from last row */
    }
    
    .edvee-table .edvee-row:hover {
        background: #f9f9f9;
    }    .edvee-cell {
        flex: 1;
        padding: 0 3px; /* Further reduced horizontal padding for narrower tables */
        color: #333;
        font-size: 12px; /* Even smaller font size */
        line-height: 1.2; /* Even tighter line height */
    }    .edvee-cell.actions {
        flex: none;
        width: 24px; /* Further reduced width for narrower tables */
        white-space: nowrap;
        text-align: right;
        margin-left: 4px; /* Further reduced margin */
        position: relative;
        z-index: 10;
    }
    
    .edvee-cell a {
        transition: color 0.3s;
    }
      /* Dropdown menu styles */
    .dropdown {
        position: relative;
        display: inline-block;
    }    .dropbtn {
        background-color: transparent;
        color: #777;
        font-size: 16px; /* Slightly smaller for narrower tables */
        font-weight: bold;
        border: none;
        cursor: pointer;
        padding: 3px; /* Reduced padding */
        border-radius: 3px;
        transition: all 0.2s ease;
        width: 22px; /* Smaller for narrower tables */
        height: 22px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .dropbtn:hover {
        color: #333;
        background-color: #f5f5f5;
    }.dropdown-content {
        display: none;
        position: absolute;
        right: -5px;
        top: 30px;
        background-color: white;
        min-width: 120px;
        box-shadow: 0px 4px 12px rgba(0,0,0,0.15);
        z-index: 200;
        border-radius: 8px;
        overflow: hidden;
        transition: all 0.3s ease;
        border: 1px solid #eaeaea;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }    .dropdown-content a {
        color: #444;
        padding: 10px 15px;
        text-decoration: none;
        display: block;
        border-bottom: 1px solid #f0f0f0;
        transition: all 0.2s ease;
        font-size: 14px;
    }
    
    .dropdown-content a:last-of-type {
        border-bottom: none;
    }

    .dropdown-content a:hover {
        background-color: #f8f8f8;
        color: #000;
    }    .dropdown-btn {
        background: none;
        border: none;
        color: #e53935;
        cursor: pointer;
        font-size: 14px;
        padding: 10px 15px;
        width: 100%;
        text-align: left;
        transition: all 0.2s ease;
        font-family: inherit;
    }

    .dropdown-btn:hover {
        background-color: #fff2f2;
        color: #d32f2f;
    }
    
    /* Para deixar o botão de eliminar com estilo adequado */
    .dropdown-content form:last-child {
        border-top: none;
    }
    
    /* Button for adding a new component */
    .btn-add {
        background-color: #2196f3;
        color: #fff;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: 10px;
    }

    .btn-add:hover {
        background-color: #1976d2;
    }
        
    /* Melhoria para a aparência das conexões */
    .leader-line {
        z-index: 100 !important; /* Garante que as linhas sempre aparecem acima do conteúdo */
    }
    
    /* Novo estilo para pontos de conexão fora das tabelas */
    .connection-point-container {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 0;
        z-index: 5;
    }    /* Container para pontos à esquerda */
    .connection-points-left {
        left: -25px; /* Aumentado para acomodar pontos maiores */
    }
    
    /* Container para pontos à direita */
    .connection-points-right {
        right: -25px; /* Aumentado para acomodar pontos maiores */
    }    /* Para melhor visualização dos pontos de conexão */
    .connectable {
        position: relative;
        padding: 4px 8px; /* Much more compact padding */
        cursor: pointer;
        margin: 2px 0; /* Minimal margin */
    }.connection-point {
        position: absolute;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background-color: white;
        border: 2px solid;
        z-index: 10;        cursor: pointer;
        transform: translateX(-50%); /* Centraliza horizontalmente */
        box-sizing: border-box;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);
    }    .connection-point:hover {
        transform: translateX(-50%) scale(1.5);
        box-shadow: 0 0 12px rgba(0, 0, 0, 0.5), 0 0 0 2px rgba(255, 255, 255, 0.9);
        z-index: 15;
    }
      .connection-point.selected-element {
        transform: translateX(-50%) scale(1.35);
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5), 0 0 0 2px rgba(255, 255, 255, 0.9);
        z-index: 15;
        border-width: 2.5px;
    }
      .connection-point.connection-mode {
        box-shadow: 0 0 8px rgba(33, 150, 243, 0.6);
        border-width: 2.5px;
    }
      .connection-point[data-section="Competencia"] {
        border-color: #e91e63;
        box-shadow: 0 0 5px rgba(233, 30, 99, 0.4);
    }
    
    .connection-point[data-section="Avaliacao"] {
        border-color: #2196f3;
        box-shadow: 0 0 5px rgba(33, 150, 243, 0.4);
    }
    
    .connection-point[data-section="Conteudo"] {
        border-color: #ffc107;
        box-shadow: 0 0 5px rgba(255, 193, 7, 0.4);
    }
    
    .connection-point[data-section="Atividade"] {
        border-color: #4caf50;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.4);
    }
      /* Estilos de hover específicos por seção */
    .connection-point[data-section="Competencia"]:hover {
        transform: translateX(-50%) scale(1.6);
        box-shadow: 0 0 15px rgba(233, 30, 99, 0.8), 0 0 0 2px rgba(255, 255, 255, 0.9);
    }
    
    .connection-point[data-section="Avaliacao"]:hover {
        transform: translateX(-50%) scale(1.6);
        box-shadow: 0 0 15px rgba(33, 150, 243, 0.8), 0 0 0 2px rgba(255, 255, 255, 0.9);
    }
    
    .connection-point[data-section="Conteudo"]:hover {
        transform: translateX(-50%) scale(1.6);
        box-shadow: 0 0 15px rgba(255, 193, 7, 0.8), 0 0 0 2px rgba(255, 255, 255, 0.9);
    }
    
    .connection-point[data-section="Atividade"]:hover {
        transform: translateX(-50%) scale(1.6);
        box-shadow: 0 0 15px rgba(76, 175, 80, 0.8), 0 0 0 2px rgba(255, 255, 255, 0.9);
    }

    /* Ajustes nas caixas para acomodar o novo layout */
    .edvee-box {
        position: relative;
        overflow: visible;
        z-index: 1;
    }

    form input[type="text"] {
        width: calc(100% - 30px);
        padding: 10px 12px;
        margin: 8px 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        transition: border-color 0.3s;
        font-size: 14px;
    }

    /* Estilo para o efeito de clique */
    .connection-point:active {
        transform: translateX(-50%) scale(0.9);
        opacity: 0.8;
        transition: transform 0.1s, opacity 0.1s;
    }
    
    /* Garantindo que o efeito de hover é restaurado após o clique */
    .connection-point:active:hover {
        transform: translateX(-50%) scale(1.1);
        opacity: 1;
    }    /* Estilo para indicar quando uma conexão é possível */
    .connection-point.can-connect {
        box-shadow: 0 0 10px rgba(76, 175, 80, 0.7);
        border-width: 3px;
    }

    /* Estilo para modo de eliminação */
    .connection-point.delete-mode {
        box-shadow: 0 0 10px rgba(255, 87, 34, 0.7);
        border-width: 3px;
        animation: deleteModePulse 2s infinite;
    }

    .connection-point.delete-mode.selected-element {
        box-shadow: 0 0 15px rgba(255, 87, 34, 0.9);
        transform: translateX(-50%) scale(1.4);
    }

    @@keyframes deleteModePulse {
        0%, 100% { 
            box-shadow: 0 0 10px rgba(255, 87, 34, 0.7);
        }
        50% { 
            box-shadow: 0 0 15px rgba(255, 87, 34, 0.9);
        }
    }

    /* Estilo para feedback de conexão bem-sucedida */
    .connection-point.connection-success {
        animation: successPulse 1s ease-in-out;
    }
    
    @@keyframes successPulse {
        0% { 
            transform: translateX(-50%) scale(1);
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
        }
        50% { 
            transform: translateX(-50%) scale(1.4);
            box-shadow: 0 0 20px rgba(76, 175, 80, 0.8);
        }
        100% { 
            transform: translateX(-50%) scale(1);
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.5);
        }
    }

    /* Estilo para tooltips nos pontos de conexão */
    .connection-point {
        position: relative;
    }
    
    .connection-point::after {
        content: attr(data-tooltip);
        position: absolute;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.75);
        color: white;
        text-align: center;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
        z-index: 100;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s, visibility 0.3s;
        pointer-events: none;
    }
    
    .connection-point:hover::after {
        opacity: 1;
        visibility: visible;
    }

    /* Melhorando a interação visual com os elementos conectáveis */
    .connectable:hover {
        background-color: rgba(0, 0, 0, 0.03);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    /* Estilo específico para elementos quando no modo de conexão */
    .connection-mode .connectable:hover {
        background-color: rgba(0, 0, 0, 0.05);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    }    /* Estilos adicionais para garantir posicionamento adequado do dropdown */
    .dropdown-content::before {
        content: '';
        position: absolute;
        top: -5px;
        right: 10px;
        width: 10px;
        height: 10px;
        background-color: white;
        transform: rotate(45deg);
        border-left: 1px solid #eaeaea;
        border-top: 1px solid #eaeaea;
        z-index: -1;
    }
    
    /* Prevenir que o dropdown fique fora da tela em dispositivos móveis */
    @@media screen and (max-width: 768px) {
        .dropdown-content {
            right: 0;
            min-width: 100px;
        }
    }
      /* Estilização específica para formulários dentro do dropdown */
    .dropdown-content form {
        margin: 0;
    }

    /* Estilos para o pop-up personalizado */
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .popup-overlay.show {
        opacity: 1;
    }

    .custom-popup {
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        max-width: 400px;
        width: 90%;
        transform: scale(0.7);
        transition: transform 0.3s ease;
    }

    .popup-overlay.show .custom-popup {
        transform: scale(1);
    }

    .popup-content {
        padding: 30px;
        text-align: center;
    }

    .popup-icon {
        font-size: 48px;
        margin-bottom: 20px;
        font-weight: bold;
    }

    .custom-popup.success .popup-icon {
        color: #4CAF50;
    }

    .custom-popup.error .popup-icon {
        color: #f44336;
    }

    .custom-popup.info .popup-icon {
        color: #2196F3;
    }

    .popup-message {
        font-size: 16px;
        margin-bottom: 25px;
        color: #333;
        line-height: 1.5;
    }

    .popup-close-btn {
        background-color: #1976d2;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        transition: background-color 0.3s ease;
        min-width: 80px;
    }

    .popup-close-btn:hover {
        background-color: #1565c0;
    }

    .custom-popup.success .popup-close-btn {
        background-color: #4CAF50;
    }

    .custom-popup.success .popup-close-btn:hover {
        background-color: #45a049;
    }

    .custom-popup.error .popup-close-btn {
        background-color: #f44336;
    }

    .custom-popup.error .popup-close-btn:hover {
        background-color: #da190b;
    }    /* Additional compact styling overrides */
    .add-topic-container {
        padding: 5px !important; /* Even more compact */
    }
    
    .add-topic-btn {
        padding: 5px 8px !important; /* More compact button */
        font-size: 11px !important; /* Even smaller font */
        border-radius: 3px !important;
    }
    
    .add-topic-form {
        margin-top: 6px !important;
        padding: 8px !important; /* Further reduced */
    }
    
    .add-topic-form textarea {
        min-height: 45px !important; /* Even smaller textarea */
        padding: 5px 8px !important;
        font-size: 11px !important;
        margin-bottom: 8px !important;
    }
    
    .btn-cancel, .btn-confirm {
        padding: 4px 10px !important; /* Even smaller buttons */
        font-size: 11px !important;
        min-width: 65px !important;
    }
    
    /* Further reduce connection point container spacing */
    .connection-points-left {
        left: -16px; /* Further reduced for narrower tables */
    }
    
    .connection-points-right {
        right: -16px; /* Further reduced for narrower tables */
    }
    
    .connection-point {
        width: 12px; /* Further reduced for narrower tables */
        height: 12px; /* Further reduced for narrower tables */
    }
    
    /* Make dropdowns more compact */
    .dropbtn {
        width: 20px !important; /* Even smaller dropdown button */
        height: 20px !important;
        font-size: 14px !important;
    }
    
    .dropdown-content {
        min-width: 90px; /* Even narrower dropdown */
    }
    
    .dropdown-content a {
        padding: 6px 10px; /* Further reduced padding */
        font-size: 12px;
    }
    
    .dropdown-btn {
        padding: 6px 10px; /* Further reduced padding */
        font-size: 12px;
    }
    
    /* Make the entire layout more condensed */
    .connection-instructions {
        padding: 6px; /* Further reduced instruction padding */
        margin-bottom: 10px;
        font-size: 13px; /* Smaller instruction text */
    }
    
    .connection-controls {
        margin: 10px 0; /* Further reduced control margins */
        gap: 6px;
    }
    
    /* Optimize connectable elements for narrower tables */
    .connectable {
        padding: 3px 6px !important; /* Even more compact */
        margin: 1px 0 !important; /* Minimal margin */
        font-size: 11px !important; /* Smaller text */
        line-height: 1.1 !important; /* Very tight line height */
    }
</style>
