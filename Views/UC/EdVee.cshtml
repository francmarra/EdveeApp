@model Edveeeeeee.Models.ViewModels.EdVeeViewModel

<h2>EdVee: @Model.UnidadeCurricular.Nome</h2>

@if (!string.IsNullOrWhiteSpace(Model.UnidadeCurricular.Descricao))
{
    <p><em>@Model.UnidadeCurricular.Descricao</em></p>
}

<!-- Connections Section Start -->
<div style="background: #f8f9fa; border-radius: 10px; padding: 15px; margin-top: 20px;">
    <h4>Conexões Entre Secções</h4>
    <div class="connection-controls">
        <button id="toggleConnectionMode" class="btn-connection-mode inactive">Modo de Conexão: DESLIGADO</button>
        <button id="clearConnections" class="btn-clear-connections" style="display: none;">Limpar Conexões</button>
        <button id="saveConnections" class="btn-save-connections" style="display: none;">Salvar Conexões</button>
    </div>
    <div class="connection-instructions" style="display:none; margin-top: 10px;">
        <p>Para criar uma ligação: <b>Clique</b> em um elemento e depois <b>clique</b> em outro elemento para ligar.</p>
    </div>
</div>

<!-- LeaderLine CDN -->
<script src="https://cdn.jsdelivr.net/npm/leader-line@1.0.7/leader-line.min.js"></script>
<script>
    // Variáveis para controle de ligações
    let connectionMode = false;
    let selectedElement = null;
    let lines = [];
    let currentConnections = [];
      // Função para recuperar as ligações existentes do servidor
    async function loadConnections() {
        try {
            const response = await fetch('/UC/GetConnections/@Model.UnidadeCurricular.Id');
            if (response.ok) {
                const connections = await response.json();
                currentConnections = connections; // Armazena as conexões recuperadas
                renderConnections(connections);
            }
        } catch (error) {
            console.error('Erro ao carregar conexões:', error);
        }
    }
    
    // Função para salvar as conexões criadas
    async function saveConnections() {
        try {
            const response = await fetch('/UC/SaveConnections', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ucId: @Model.UnidadeCurricular.Id,
                    connections: currentConnections
                })
            });
            
            if (response.ok) {
                alert('Conexões salvas com sucesso!');
            } else {
                alert('Erro ao salvar conexões.');
            }
        } catch (error) {
            console.error('Erro ao salvar conexões:', error);
            alert('Erro ao salvar as conexões.');
        }
    }    // Função para desenhar as ligações na tela
    function renderConnections(connections) {
        // Limpa as linhas existentes
        clearLines();
        
        // Para cada conexão, cria uma linha
        connections.forEach(conn => {
            const origem = document.querySelector(`[data-id="${conn.origemTipo}-${conn.origemId}"]`);
            const destino = document.querySelector(`[data-id="${conn.destinoTipo}-${conn.destinoId}"]`);
            
            if (origem && destino) {                
                // Define a cor da linha baseada nos tipos de origem e destino
                let lineColor = getLineColor(origem.dataset.section, destino.dataset.section);
                
                // Seleciona o elemento de conexão do lado direito do tema de origem
                const origemPoint = origem.querySelector('.connection-point-right');
                const destinoPoint = destino.querySelector('.connection-point-left');
                  // Cria uma linha simples usando os pontos de conexão
                const line = new LeaderLine(
                    origemPoint || origem,
                    destinoPoint || destino,
                    {
                        path: 'straight',
                        endPlug: 'behind',  // Remove a seta no final
                        startPlug: 'behind', // Remove a seta no início
                        size: 2,
                        color: lineColor,
                        startSocket: 'right',
                        endSocket: 'left',
                        startSocketGravity: 100,  // Força a linha a sair horizontalmente
                        endSocketGravity: 100,    // Força a linha a chegar horizontalmente
                        dash: {animation: true}   // Adiciona animação à linha (opcional)
                    }
                );
                lines.push(line);
                
                // Adiciona a conexão à lista atual
                currentConnections.push({
                    origemTipo: conn.origemTipo,
                    origemId: conn.origemId,
                    destinoTipo: conn.destinoTipo,
                    destinoId: conn.destinoId
                });
            }
        });
    }    // Função para determinar a cor da linha baseada nos tipos de origem e destino
    function getLineColor(origemSection, destinoSection) {
        // Cor padrão
        let color = '#0066cc';
        
        // Cores por tipo de seção
        if ((origemSection === 'Conteudo' && destinoSection === 'Atividade') || 
            (origemSection === 'Atividade' && destinoSection === 'Conteudo')) {
            color = '#4caf50'; // Verde para conexões Conteudo-Atividade
        } else if ((origemSection === 'Competencia' && destinoSection === 'Avaliacao') || 
                  (origemSection === 'Avaliacao' && destinoSection === 'Competencia')) {
            color = '#2196f3'; // Azul para conexões Competencia-Avaliacao
        } else if ((origemSection === 'Competencia' && destinoSection === 'Atividade') || 
                  (origemSection === 'Atividade' && destinoSection === 'Competencia')) {
            color = '#e91e63'; // Rosa para conexões Competencia-Atividade
        } else if ((origemSection === 'Conteudo' && destinoSection === 'Avaliacao') || 
                  (origemSection === 'Avaliacao' && destinoSection === 'Conteudo')) {
            color = '#ffc107'; // Amarelo para conexões Conteudo-Avaliacao
        }
        
        return color;
    }
      // Função para limpar todas as linhas
    function clearLines() {
        lines.forEach(line => line.remove());
        lines = [];
        // Mantém as conexões para que possamos restaurá-las ao sair do modo de conexão
        if (connectionMode) {
            currentConnections = [];
        }
    }      // Função para ativar/desativar o modo de conexão
    function toggleConnectionMode() {
        connectionMode = !connectionMode;
        const button = document.getElementById('toggleConnectionMode');
        const instructions = document.querySelector('.connection-instructions');
        const clearBtn = document.getElementById('clearConnections');
        const saveBtn = document.getElementById('saveConnections');
        
        if (connectionMode) {
            button.textContent = 'Modo de Conexão: LIGADO';
            button.classList.add('active');
            button.classList.remove('inactive');
            instructions.style.display = 'block';
            clearBtn.style.display = 'inline-block';
            saveBtn.style.display = 'inline-block';
            
            // Adiciona classe de destaque aos elementos conectáveis
            document.querySelectorAll('.connectable').forEach(el => {
                el.classList.add('connection-mode');
            });
        } else {
            button.textContent = 'Modo de Conexão: DESLIGADO';
            button.classList.remove('active');
            button.classList.add('inactive');
            instructions.style.display = 'none';
            clearBtn.style.display = 'none';
            saveBtn.style.display = 'none';
            selectedElement = null;
            
            // Remove classe de destaque
            document.querySelectorAll('.connectable').forEach(el => {
                el.classList.remove('connection-mode');
                el.classList.remove('selected-element');
            });
            
            // Renderiza novamente as conexões existentes para garantir que permaneçam visíveis
            renderStoredConnections();
        }
    }
    
    // Função para renderizar as conexões armazenadas sem limpar a lista atual
    function renderStoredConnections() {
        // Limpa apenas as linhas visuais, mantendo as conexões armazenadas
        lines.forEach(line => line.remove());
        lines = [];
        
        // Para cada conexão armazenada, cria uma linha visual
        currentConnections.forEach(conn => {
            const origem = document.querySelector(`[data-id="${conn.origemTipo}-${conn.origemId}"]`);
            const destino = document.querySelector(`[data-id="${conn.destinoTipo}-${conn.destinoId}"]`);
            
            if (origem && destino) {
                let lineColor = getLineColor(origem.dataset.section, destino.dataset.section);
                
                // Seleciona os pontos de conexão
                const origemPoint = origem.querySelector('.connection-point-right');
                const destinoPoint = destino.querySelector('.connection-point-left');
                  // Cria a linha visual
                const line = new LeaderLine(
                    origemPoint || origem,
                    destinoPoint || destino,
                    {
                        path: 'straight',
                        endPlug: 'behind',  // Remove a seta no final
                        startPlug: 'behind', // Remove a seta no início
                        size: 2,
                        color: lineColor,
                        startSocket: 'right',
                        endSocket: 'left',
                        startSocketGravity: 100,  // Força a linha a sair horizontalmente
                        endSocketGravity: 100,    // Força a linha a chegar horizontalmente
                        dash: {animation: true}   // Adiciona animação à linha (opcional)
                    }
                );
                lines.push(line);
            }
        });
    }
      // Manipulador de clique para selecionar elementos
    function handleElementClick(e) {
        if (!connectionMode) return;
        
        const element = e.currentTarget;
        
        if (!selectedElement) {
            // Primeira seleção
            selectedElement = element;
            element.classList.add('selected-element');
        } else if (selectedElement === element) {
            // Clicou no mesmo elemento - deseleciona
            selectedElement.classList.remove('selected-element');
            selectedElement = null;
        } else {
            // Segunda seleção - cria a conexão
            const origem = selectedElement;
            const destino = element;
            
            const [origemTipo, origemId] = origem.dataset.id.split('-');
            const [destinoTipo, destinoId] = destino.dataset.id.split('-');
            
            // Verifica se a conexão já existe
            const existingConnection = currentConnections.find(
                conn => conn.origemId == origemId && 
                       conn.origemTipo === origemTipo &&
                       conn.destinoId == destinoId &&
                       conn.destinoTipo === destinoTipo
            );              if (!existingConnection) {                // Define a cor da linha baseada nas seções de origem e destino
                let lineColor = getLineColor(origem.dataset.section, destino.dataset.section);
                  
                // Seleciona o elemento de conexão do lado direito do tema de origem
                const origemPoint = origem.querySelector('.connection-point-right');
                const destinoPoint = destino.querySelector('.connection-point-left');
                
                // Cria a linha visual simples
                const line = new LeaderLine(
                    origemPoint || origem,
                    destinoPoint || destino,
                    {
                        path: 'straight',
                        endPlug: 'arrow1',
                        size: 2,
                        color: lineColor,
                        startSocket: 'right',
                        endSocket: 'left',
                        startSocketGravity: 80,  // Ajuda a linha a sair mais horizontalmente
                        endSocketGravity: 80     // Ajuda a linha a chegar mais horizontalmente
                    }
                );
                lines.push(line);
                
                // Adiciona à lista de conexões
                currentConnections.push({
                    origemTipo: origemTipo,
                    origemId: origemId,
                    destinoTipo: destinoTipo,
                    destinoId: destinoId
                });
            }
            
            // Limpa a seleção
            selectedElement.classList.remove('selected-element');
            selectedElement = null;
        }
    }
      // Inicialização
    window.addEventListener('DOMContentLoaded', () => {
        // Carrega conexões existentes
        loadConnections();
        
        // Configura handlers dos botões
        document.getElementById('toggleConnectionMode').addEventListener('click', toggleConnectionMode);
        document.getElementById('clearConnections').addEventListener('click', () => {
            clearLines(); // Limpa as linhas e as conexões
            // Renderiza as conexões novamente se não estiver no modo de conexão
            if (!connectionMode) {
                renderStoredConnections();
            }
        });
        document.getElementById('saveConnections').addEventListener('click', saveConnections);
        
        // Adiciona handler de clique a todos os elementos conectáveis
        document.querySelectorAll('.connectable').forEach(el => {
            el.addEventListener('click', handleElementClick);
        });
        
        // Ajusta as linhas quando a janela é redimensionada
        window.addEventListener('resize', () => {
            lines.forEach(line => line.position());
        });
        
        // Adicionar um observer para reagir à rolagem da página ou outras alterações no layout
        const observer = new MutationObserver(() => {
            // Reposiciona todas as linhas quando houver mudanças no DOM
            lines.forEach(line => line.position());
        });
        
        // Observa mudanças no layout
        observer.observe(document.body, { 
            childList: true, 
            subtree: true,
            attributes: true
        });
    });
</script>

<div class="edvee-matrix">    <div class="edvee-row">
        <!-- Competências -->
        <div class="edvee-box competencias">
            <h3>Competências</h3>
            <div class="edvee-table">                @foreach (var c in Model.Competencias)
                {
                    <div class="edvee-row">                        <div class="edvee-cell">
                            <div class="connectable" data-id="Competencia-@c.Id" data-section="Competencia">
                                @c.Texto
                                <div class="connection-point-left"></div>
                                <div class="connection-point-right"></div>
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditCompetencia/@c.Id">Editar</a>
                                    <form asp-action="DeleteCompetencia" method="post">
                                        <input type="hidden" name="id" value="@c.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddCompetencia" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Nova competência..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>

        <!-- Avaliação -->
        <div class="edvee-box avaliacoes">
            <h3>Avaliação</h3>
            <div class="edvee-table">                @foreach (var a in Model.Avaliacoes)
                {
                    <div class="edvee-row">                        <div class="edvee-cell">
                            <div class="connectable" data-id="Avaliacao-@a.Id" data-section="Avaliacao">
                                @a.Texto
                                <div class="connection-point-left"></div>
                                <div class="connection-point-right"></div>
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditAvaliacao/@a.Id">Editar</a>
                                    <form asp-action="DeleteAvaliacao" method="post">
                                        <input type="hidden" name="id" value="@a.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddAvaliacao" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Nova avaliação..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>
    </div>    <div class="edvee-row">
        <!-- Conteúdos -->
        <div class="edvee-box conteudos">
            <h3>Conteúdos</h3>
            <div class="edvee-table">                @foreach (var c in Model.Conteudos)
                {
                    <div class="edvee-row">                        <div class="edvee-cell">
                            <div class="connectable" data-id="Conteudo-@c.Id" data-section="Conteudo">
                                @c.Texto
                                <div class="connection-point-left"></div>
                                <div class="connection-point-right"></div>
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditConteudo/@c.Id">Editar</a>
                                    <form asp-action="DeleteConteudo" method="post">
                                        <input type="hidden" name="id" value="@c.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddConteudo" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Novo conteúdo..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>

        <!-- Atividades -->
        <div class="edvee-box atividades">
            <h3>Atividades</h3>
            <div class="edvee-table">                @foreach (var a in Model.Atividades)
                {
                    <div class="edvee-row">                        <div class="edvee-cell">
                            <div class="connectable" data-id="Atividade-@a.Id" data-section="Atividade">
                                @a.Texto
                                <div class="connection-point-left"></div>
                                <div class="connection-point-right"></div>
                            </div>
                        </div>
                        <div class="edvee-cell actions">
                            <div class="dropdown">
                                <button class="dropbtn">⋮</button>
                                <div class="dropdown-content">
                                    <a href="/UC/EditAtividade/@a.Id">Editar</a>
                                    <form asp-action="DeleteAtividade" method="post">
                                        <input type="hidden" name="id" value="@a.Id" />
                                        <button type="submit" class="dropdown-btn">Eliminar</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddAtividade" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Nova atividade..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>
    </div>
</div>

<style>
    body {
        font-family: "Segoe UI", Arial, sans-serif;
        background: #f7f7f7;
    }
    
    .btn-edvee {
        background-color: #a60000;
        color: white;
        padding: 8px 14px;
        border-radius: 4px;
        text-decoration: none;
        margin-right: 10px;
    }
    
    .btn-matrix {
        background-color: #0055aa;
        color: white;
        padding: 8px 14px;
        border-radius: 4px;
        text-decoration: none;
    }    .btn-connection-mode, .btn-clear-connections, .btn-save-connections {
        padding: 8px 14px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        margin-right: 10px;
        font-weight: bold;
        color: white;
    }
    
    .btn-connection-mode {
        background-color: #22aa22;
    }
    
    .btn-connection-mode.active {
        background-color: #22aa22;
    }
    
    /* Versão verde quando ativo, cinza quando desligado */
    #toggleConnectionMode {
        background-color: #22aa22;
    }
    
    #toggleConnectionMode.inactive {
        background-color: #5a5a5a;
    }
    
    .btn-clear-connections {
        background-color: #d32f2f;
    }
    
    .btn-save-connections {
        background-color: #1976d2;
    }
    
    .connection-controls {
        display: flex;
        margin: 15px 0;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .connection-instructions {
        background-color: #ffd;
        padding: 10px;
        border-radius: 4px;
        border-left: 4px solid #fb1;
        margin-bottom: 15px;
    }
    
    .connectable {
        position: relative;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .connection-mode {
        box-shadow: 0 0 0 1px #0066cc;
        border-radius: 4px;
    }
    
    .connection-mode:hover {
        background-color: rgba(0, 102, 204, 0.1);
    }
    
    .selected-element {
        background-color: rgba(0, 102, 204, 0.2) !important;
        box-shadow: 0 0 0 2px #0066cc !important;
    }    .edvee-matrix {
        display: flex;
        flex-direction: column;
        gap: 60px; /* Increased gap between rows */
        margin-top: 30px;
        background: transparent;
        position: relative; 
        overflow: visible;
        width: 100%;
        padding-bottom: 80px; /* Added more space at bottom */
    }.edvee-row {
        display: flex;
        justify-content: space-between;
        position: relative;
        gap: 80px; /* Increased horizontal gap between sections */
    }/* Improved connector positioning */
    .connectable {
        position: relative;
        padding: 8px 30px 8px 25px; /* Increased padding for better space around text */
        cursor: pointer;
        margin: 5px 0;
        white-space: normal; /* Allow text to wrap */
        overflow: visible; /* Show all text */
        line-height: 1.4;
        border-radius: 4px;
        transition: all 0.2s ease;
    }
    
    /* Circle connection point on left */
    .connectable:before {
        content: '';
        display: block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        position: absolute;
        left: 5px;
        top: 50%;
        transform: translateY(-50%);
    }
    
    /* Connection points for anchor lines */
    .connectable .connection-point-left,
    .connectable .connection-point-right {
        position: absolute;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
        border: 2px solid;
        opacity: 0.7; /* Semi-visible dots */
    }
    
    /* Right connection point */
    .connectable .connection-point-right {
        right: 10px;
        background-color: white;
    }
    
    /* Left connection point */
    .connectable .connection-point-left {
        left: 5px;
        background-color: white;
    }
    
    /* Section-specific colors for connection points */
    .connectable[data-section="Competencia"]:before {
        background-color: #e91e63;
    }
    
    .connectable[data-section="Avaliacao"]:before {
        background-color: #2196f3;
    }
    
    .connectable[data-section="Conteudo"]:before {
        background-color: #ffc107;
    }
    
    .connectable[data-section="Atividade"]:before {
        background-color: #4caf50;
    }
    
    /* Connection point colors */
    .connectable[data-section="Competencia"] .connection-point-right,
    .connectable[data-section="Competencia"] .connection-point-left {
        border-color: #e91e63;
    }
    
    .connectable[data-section="Avaliacao"] .connection-point-right,
    .connectable[data-section="Avaliacao"] .connection-point-left {
        border-color: #2196f3;
    }
    
    .connectable[data-section="Conteudo"] .connection-point-right,
    .connectable[data-section="Conteudo"] .connection-point-left {
        border-color: #ffc107;
    }
    
    .connectable[data-section="Atividade"] .connection-point-right,
    .connectable[data-section="Atividade"] .connection-point-left {
        border-color: #4caf50;
    }

    .edvee-box {
        flex: 1;
        background-color: #fff;
        padding: 0;
        border-radius: 6px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        overflow: visible; /* Alterado de hidden para visible para permitir que as conexões sejam visíveis */
        min-width: 40%; /* Slightly reduced to allow more space between boxes */
        max-width: 45%; /* Add max-width to maintain proportions */
        margin-bottom: 20px;
        z-index: 1; /* Garante que as caixas fiquem abaixo das linhas de conexão */
    }

        .edvee-box:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }        .edvee-box h3 {
            margin: 0;
            padding: 12px 15px;
            font-size: 16px;
            color: #fff;
            font-weight: 500;
        }

        .edvee-box.competencias h3 {
            background-color: #e91e63;
        }

        .edvee-box.avaliacoes h3 {
            background-color: #2196f3;
        }

        .edvee-box.conteudos h3 {
            background-color: #ffc107;
            color: #333;
        }

        .edvee-box.atividades h3 {
            background-color: #4caf50;
        }    .edvee-table {
        display: flex;
        flex-direction: column;
        border-top: 1px solid #eee;
        margin: 5px 0;
        padding: 0 10px;
    }

        .edvee-table .edvee-row {
            display: flex;
            border-bottom: 1px solid #eee;
            padding: 10px 0; /* Increased vertical padding */
            align-items: center;
            transition: background 0.3s;
            gap: 10px; /* Added gap between cells in a row */
        }

            .edvee-table .edvee-row:hover {
                background: #f9f9f9;
            }    .edvee-cell {
        flex: 1;
        padding: 0 5px;
        color: #333;
        font-size: 14px;
    }

        .edvee-cell.actions {
            flex: none;
            width: 40px;
            white-space: nowrap;
            text-align: right;
        }

        .edvee-cell a {
            transition: color 0.3s;
        }/* Dropdown menu styles */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropbtn {
        background-color: transparent;
        color: #555;
        font-size: 18px;
        font-weight: bold;
        border: none;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .dropbtn:hover {
        background-color: #f1f1f1;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        right: 0;
        background-color: #f9f9f9;
        min-width: 120px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        border-radius: 4px;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown-content a {
        color: #333;
        padding: 8px 12px;
        text-decoration: none;
        display: block;
        border-bottom: 1px solid #eee;
    }

    .dropdown-content a:hover {
        background-color: #f1f1f1;
    }

    .dropdown-btn {
        background: none;
        border: none;
        color: #f44336;
        cursor: pointer;
        font-size: 14px;
        padding: 8px 12px;
        width: 100%;
        text-align: left;
    }

    .dropdown-btn:hover {
        background-color: #f1f1f1;
    }    /* Button for adding a new component */
    .btn-add {
        background-color: #2196f3;
        color: #fff;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: 10px;
    }

        .btn-add:hover {
            background-color: #1976d2;
        }
        
    /* Melhoria para a aparência das conexões */
    .leader-line {
        z-index: 10 !important; /* Garante que as linhas sempre aparecem acima do conteúdo */
    }

    form input[type="text"] {
        width: calc(100% - 20px);
        padding: 8px 10px;
        margin: 5px 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        transition: border-color 0.3s;
        font-size: 14px;
    }

        form input[type="text"]:focus {
            border-color: #004488;
            outline: none;
            box-shadow: 0 0 3px rgba(0, 68, 136, 0.2);
        }
</style>
