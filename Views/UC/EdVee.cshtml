@model Edveeeeeee.Models.ViewModels.EdVeeViewModel

<h2>EdVee: @Model.UnidadeCurricular.Nome</h2>

@if (!string.IsNullOrWhiteSpace(Model.UnidadeCurricular.Descricao))
{
    <p><em>@Model.UnidadeCurricular.Descricao</em></p>
}

<!-- Connections Section Start -->
<div class="mt-4 p-3" style="background: #f8f9fa; border-radius: 10px;">
    <h4>Conexões Entre Secções</h4>
    <div class="connection-controls">
        <button id="toggleConnectionMode" class="btn-connection-mode">Modo de Conexão: DESLIGADO</button>
        <button id="clearConnections" class="btn-clear-connections">Limpar Conexões</button>
        <button id="saveConnections" class="btn-save-connections">Salvar Conexões</button>
    </div>
    <div class="connection-instructions" style="display:none; margin-top: 10px;">
        <p>Para criar uma ligação: <b>Clique</b> em um elemento e depois <b>clique</b> em outro elemento para ligar.</p>
    </div>
</div>

<!-- LeaderLine CDN -->
<script src="https://cdn.jsdelivr.net/npm/leader-line@1.0.7/leader-line.min.js"></script>
<script>
    // Variáveis para controle de ligações
    let connectionMode = false;
    let selectedElement = null;
    let lines = [];
    let currentConnections = [];
    
    // Função para recuperar as ligações existentes do servidor
    async function loadConnections() {
        try {
            const response = await fetch('/UC/GetConnections/@Model.UnidadeCurricular.Id');
            if (response.ok) {
                const connections = await response.json();
                renderConnections(connections);
            }
        } catch (error) {
            console.error('Erro ao carregar conexões:', error);
        }
    }
    
    // Função para salvar as conexões criadas
    async function saveConnections() {
        try {
            const response = await fetch('/UC/SaveConnections', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ucId: @Model.UnidadeCurricular.Id,
                    connections: currentConnections
                })
            });
            
            if (response.ok) {
                alert('Conexões salvas com sucesso!');
            } else {
                alert('Erro ao salvar conexões.');
            }
        } catch (error) {
            console.error('Erro ao salvar conexões:', error);
            alert('Erro ao salvar as conexões.');
        }
    }
    
    // Função para desenhar as ligações na tela
    function renderConnections(connections) {
        // Limpa as linhas existentes
        clearLines();
        
        // Para cada conexão, cria uma linha
        connections.forEach(conn => {
            const origem = document.querySelector(`[data-id="${conn.origemTipo}-${conn.origemId}"]`);
            const destino = document.querySelector(`[data-id="${conn.destinoTipo}-${conn.destinoId}"]`);
            
            if (origem && destino) {
                const line = new LeaderLine(
                    origem,
                    destino,
                    {
                        path: 'straight',
                        endPlug: 'arrow1',
                        size: 2,
                        color: '#0066cc',
                        startSocketGravity: 25,
                        endSocketGravity: 25
                    }
                );
                lines.push(line);
                
                // Adiciona a conexão à lista atual
                currentConnections.push({
                    origemTipo: conn.origemTipo,
                    origemId: conn.origemId,
                    destinoTipo: conn.destinoTipo,
                    destinoId: conn.destinoId
                });
            }
        });
    }
    
    // Função para limpar todas as linhas
    function clearLines() {
        lines.forEach(line => line.remove());
        lines = [];
        currentConnections = [];
    }
    
    // Função para ativar/desativar o modo de conexão
    function toggleConnectionMode() {
        connectionMode = !connectionMode;
        const button = document.getElementById('toggleConnectionMode');
        const instructions = document.querySelector('.connection-instructions');
        
        if (connectionMode) {
            button.textContent = 'Modo de Conexão: LIGADO';
            button.classList.add('active');
            instructions.style.display = 'block';
            
            // Adiciona classe de destaque aos elementos
            document.querySelectorAll('.connectable').forEach(el => {
                el.classList.add('connection-mode');
            });
        } else {
            button.textContent = 'Modo de Conexão: DESLIGADO';
            button.classList.remove('active');
            instructions.style.display = 'none';
            selectedElement = null;
            
            // Remove classe de destaque
            document.querySelectorAll('.connectable').forEach(el => {
                el.classList.remove('connection-mode');
                el.classList.remove('selected-element');
            });
        }
    }
    
    // Manipulador de clique para selecionar elementos
    function handleElementClick(e) {
        if (!connectionMode) return;
        
        const element = e.currentTarget;
        
        if (!selectedElement) {
            // Primeira seleção
            selectedElement = element;
            element.classList.add('selected-element');
        } else if (selectedElement === element) {
            // Clicou no mesmo elemento - deseleciona
            selectedElement.classList.remove('selected-element');
            selectedElement = null;
        } else {
            // Segunda seleção - cria a conexão
            const origem = selectedElement;
            const destino = element;
            
            const [origemTipo, origemId] = origem.dataset.id.split('-');
            const [destinoTipo, destinoId] = destino.dataset.id.split('-');
            
            // Verifica se a conexão já existe
            const existingConnection = currentConnections.find(
                conn => conn.origemId == origemId && 
                       conn.origemTipo === origemTipo &&
                       conn.destinoId == destinoId &&
                       conn.destinoTipo === destinoTipo
            );
            
            if (!existingConnection) {
                // Cria a linha visual
                const line = new LeaderLine(
                    origem,
                    destino,
                    {
                        path: 'straight',
                        endPlug: 'arrow1',
                        size: 2,
                        color: '#0066cc',
                        startSocketGravity: 25,
                        endSocketGravity: 25
                    }
                );
                lines.push(line);
                
                // Adiciona à lista de conexões
                currentConnections.push({
                    origemTipo: origemTipo,
                    origemId: origemId,
                    destinoTipo: destinoTipo,
                    destinoId: destinoId
                });
            }
            
            // Limpa a seleção
            selectedElement.classList.remove('selected-element');
            selectedElement = null;
        }
    }
    
    // Inicialização
    window.addEventListener('DOMContentLoaded', () => {
        // Carrega conexões existentes
        loadConnections();
        
        // Configura handlers dos botões
        document.getElementById('toggleConnectionMode').addEventListener('click', toggleConnectionMode);
        document.getElementById('clearConnections').addEventListener('click', clearLines);
        document.getElementById('saveConnections').addEventListener('click', saveConnections);
        
        // Adiciona handler de clique a todos os elementos conectáveis
        document.querySelectorAll('.connectable').forEach(el => {
            el.addEventListener('click', handleElementClick);
        });
        
        // Ajusta as linhas quando a janela é redimensionada
        window.addEventListener('resize', () => {
            lines.forEach(line => line.position());
        });
    });
</script>

<div class="edvee-matrix">    <div class="edvee-row">
        <!-- Competências -->
        <div class="edvee-box competencias">
            <h3>Competências</h3>
            <div class="edvee-table">
                @foreach (var c in Model.Competencias)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <div class="connectable" data-id="Competencia-@c.Id">@c.Texto</div>
                        </div>
                        <div class="edvee-cell actions">
                            <a href="/UC/EditCompetencia/@c.Id" class="btn-edit">Editar</a>
                            <form asp-action="DeleteCompetencia" method="post" style="display:inline;">
                                <input type="hidden" name="id" value="@c.Id" />
                                <button type="submit" class="btn-delete">Eliminar</button>
                            </form>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddCompetencia" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Nova competência..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>

        <!-- Avaliação -->
        <div class="edvee-box avaliacoes">
            <h3>Avaliação</h3>
            <div class="edvee-table">
                @foreach (var a in Model.Avaliacoes)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <div class="connectable" data-id="Avaliacao-@a.Id">@a.Texto</div>
                        </div>
                        <div class="edvee-cell actions">
                            <a href="/UC/EditAvaliacao/@a.Id" class="btn-edit">Editar</a>
                            <form asp-action="DeleteAvaliacao" method="post" style="display:inline;">
                                <input type="hidden" name="id" value="@a.Id" />
                                <button type="submit" class="btn-delete">Eliminar</button>
                            </form>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddAvaliacao" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Nova avaliação..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>
    </div>    <div class="edvee-row">
        <!-- Conteúdos -->
        <div class="edvee-box conteudos">
            <h3>Conteúdos</h3>
            <div class="edvee-table">
                @foreach (var c in Model.Conteudos)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <div class="connectable" data-id="Conteudo-@c.Id">@c.Texto</div>
                        </div>
                        <div class="edvee-cell actions">
                            <a href="/UC/EditConteudo/@c.Id" class="btn-edit">Editar</a>
                            <form asp-action="DeleteConteudo" method="post" style="display:inline;">
                                <input type="hidden" name="id" value="@c.Id" />
                                <button type="submit" class="btn-delete">Eliminar</button>
                            </form>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddConteudo" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Novo conteúdo..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>

        <!-- Atividades -->
        <div class="edvee-box atividades">
            <h3>Atividades</h3>
            <div class="edvee-table">
                @foreach (var a in Model.Atividades)
                {
                    <div class="edvee-row">
                        <div class="edvee-cell">
                            <div class="connectable" data-id="Atividade-@a.Id">@a.Texto</div>
                        </div>
                        <div class="edvee-cell actions">
                            <a href="/UC/EditAtividade/@a.Id" class="btn-edit">Editar</a>
                            <form asp-action="DeleteAtividade" method="post" style="display:inline;">
                                <input type="hidden" name="id" value="@a.Id" />
                                <button type="submit" class="btn-delete">Eliminar</button>
                            </form>
                        </div>
                    </div>
                }
            </div>
            <form asp-action="AddAtividade" method="post">
                <input type="hidden" name="ucId" value="@Model.UnidadeCurricular.Id" />
                <input type="text" name="texto" placeholder="Nova atividade..." />
                <button type="submit" class="btn-add">+</button>
            </form>
        </div>
    </div>
</div>

<style>
    body {
        font-family: "Segoe UI", Arial, sans-serif;
        background: #f7f7f7;
    }
    
    .btn-edvee {
        background-color: #a60000;
        color: white;
        padding: 8px 14px;
        border-radius: 4px;
        text-decoration: none;
        margin-right: 10px;
    }
    
    .btn-matrix {
        background-color: #0055aa;
        color: white;
        padding: 8px 14px;
        border-radius: 4px;
        text-decoration: none;
    }
    
    .btn-connection-mode, .btn-clear-connections, .btn-save-connections {
        background-color: #555;
        color: white;
        padding: 8px 14px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        margin-right: 10px;
        font-weight: bold;
    }
    
    .btn-connection-mode.active {
        background-color: #22aa22;
    }
    
    .btn-clear-connections {
        background-color: #d32f2f;
    }
    
    .btn-save-connections {
        background-color: #1976d2;
    }
    
    .connection-controls {
        display: flex;
        margin: 15px 0;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .connection-instructions {
        background-color: #ffd;
        padding: 10px;
        border-radius: 4px;
        border-left: 4px solid #fb1;
    }
    
    .connectable {
        position: relative;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .connection-mode {
        box-shadow: 0 0 0 1px #0066cc;
        border-radius: 4px;
    }
    
    .connection-mode:hover {
        background-color: rgba(0, 102, 204, 0.1);
    }
    
    .selected-element {
        background-color: rgba(0, 102, 204, 0.2) !important;
        box-shadow: 0 0 0 2px #0066cc !important;
    }

    .edvee-matrix {
        display: flex;
        flex-direction: column;
        gap: 30px;
        margin-top: 30px;
        padding: 15px;
        background: #fff;
        border-radius: 10px;
    }

    .edvee-row {
        display: flex;
        gap: 30px;
        justify-content: space-between;
        flex-wrap: wrap;
    }

    .edvee-box {
        flex: 1;
        background-color: #fff;
        padding: 0;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s;
    }

        .edvee-box:hover {
            transform: scale(1.02);
        }

        .edvee-box h3 {
            margin: 0;
            padding: 15px;
            font-size: 18px;
            color: #fff;
        }

        .edvee-box.competencias h3 {
            background-color: #e91e63;
        }

        .edvee-box.avaliacoes h3 {
            background-color: #2196f3;
        }

        .edvee-box.conteudos h3 {
            background-color: #ffc107;
            color: #333;
        }

        .edvee-box.atividades h3 {
            background-color: #4caf50;
        }

    .edvee-table {
        display: flex;
        flex-direction: column;
        border-top: 1px solid #eee;
        margin: 10px 15px;
    }

        .edvee-table .edvee-row {
            display: flex;
            border-bottom: 1px solid #eee;
            padding: 10px 0;
            align-items: center;
            transition: background 0.3s;
        }

            .edvee-table .edvee-row:hover {
                background: #f9f9f9;
            }

    .edvee-cell {
        flex: 1;
        padding: 0 10px;
        color: #333;
    }

        .edvee-cell.actions {
            flex: none;
            white-space: nowrap;
        }

        .edvee-cell a {
            transition: color 0.3s;
        }

    /* Button for editing a component */
    .btn-edit {
        background-color: #4caf50;
        color: #fff;
        padding: 6px 12px;
        border-radius: 4px;
        text-decoration: none;
        margin-right: 5px;
        transition: background-color 0.3s;
    }

        .btn-edit:hover {
            background-color: #45a049;
        }

    /* Button for deleting a component */
    .btn-delete {
        background-color: #f44336;
        color: #fff;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn-delete:hover {
            background-color: #d32f2f;
        }

    /* Button for adding a new component */
    .btn-add {
        background-color: #2196f3;
        color: #fff;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: 10px;
    }

        .btn-add:hover {
            background-color: #1976d2;
        }

    form input[type="text"] {
        width: calc(100% - 40px);
        padding: 8px 10px;
        margin: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        transition: border-color 0.3s;
    }

        form input[type="text"]:focus {
            border-color: #004488;
            outline: none;
        }
</style>
